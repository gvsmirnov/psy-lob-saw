Buildfile: /home/nitsan/Documents/blog-ws/psy-lob-saw/build.xml

download-ivy:
     [echo] installing ivy...
      [get] Getting: http://repo1.maven.org/maven2/org/apache/ivy/ivy/2.0.0-beta1/ivy-2.0.0-beta1.jar
      [get] To: /home/nitsan/Documents/blog-ws/psy-lob-saw/ivy/ivy.jar
      [get] Not modified - so not downloaded

install-ivy:

build:
[ivy:retrieve] :: Ivy 2.2.0 - 20100923230623 :: http://ant.apache.org/ivy/ ::
[ivy:retrieve] :: loading settings :: url = jar:file:/home/nitsan/.ant/lib/ivy.jar!/org/apache/ivy/core/settings/ivysettings.xml
[ivy:retrieve] :: resolving dependencies :: psy.lob.saw#experiments;working@PushCart
[ivy:retrieve] 	confs: [default]
[ivy:retrieve] 	found com.google.caliper#caliper;0.5-rc1 in public
[ivy:retrieve] 	found com.google.code.findbugs#jsr305;1.3.9 in public
[ivy:retrieve] 	found com.google.code.gson#gson;1.7.1 in public
[ivy:retrieve] 	found com.google.guava#guava;11.0.1 in public
[ivy:retrieve] 	found com.google.code.java-allocation-instrumenter#java-allocation-instrumenter;2.0 in public
[ivy:retrieve] 	found asm#asm;3.3.1 in public
[ivy:retrieve] 	found asm#asm-analysis;3.3.1 in public
[ivy:retrieve] 	found asm#asm-tree;3.3.1 in public
[ivy:retrieve] 	found asm#asm-commons;3.3.1 in public
[ivy:retrieve] 	found asm#asm-util;3.3.1 in public
[ivy:retrieve] 	found asm#asm-xml;3.3.1 in public
[ivy:retrieve] :: resolution report :: resolve 561ms :: artifacts dl 19ms
[ivy:retrieve] 	:: evicted modules:
[ivy:retrieve] 	com.google.guava#guava;r08 by [com.google.guava#guava;11.0.1] in [default]
	---------------------------------------------------------------------
	|                  |            modules            ||   artifacts   |
	|       conf       | number| search|dwnlded|evicted|| number|dwnlded|
	---------------------------------------------------------------------
	|      default     |   12  |   0   |   0   |   1   ||   12  |   0   |
	---------------------------------------------------------------------
[ivy:retrieve] :: retrieving :: psy.lob.saw#experiments
[ivy:retrieve] 	confs: [default]
[ivy:retrieve] 	0 artifacts copied, 12 already retrieved (0kB/12ms)
     [echo] compiling...
    [javac] /home/nitsan/Documents/blog-ws/psy-lob-saw/build.xml:34: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
    [javac] /home/nitsan/Documents/blog-ws/psy-lob-saw/build.xml:35: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds

run-unaligned-experiments:
[ivy:retrieve] :: retrieving :: psy.lob.saw#experiments
[ivy:retrieve] 	confs: [default]
[ivy:retrieve] 	0 artifacts copied, 12 already retrieved (0kB/9ms)
     [echo] running experiments...
     [java]  0% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=1} 241201.89 ns; σ=2325.07 ns @ 5 trials
     [java]  0% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=1} 240861.15 ns; σ=1530.57 ns @ 3 trials
     [java]  0% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=1} 241457.18 ns; σ=1082.52 ns @ 3 trials
     [java]  1% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=1} 239878.95 ns; σ=1271.71 ns @ 3 trials
     [java]  1% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=1} 241995.35 ns; σ=1340.01 ns @ 3 trials
     [java]  1% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=1} 241558.65 ns; σ=1188.36 ns @ 3 trials
     [java]  1% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=1} 240868.14 ns; σ=438.02 ns @ 3 trials
     [java]  1% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=1} 241315.49 ns; σ=958.81 ns @ 3 trials
     [java]  1% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=1} 241791.40 ns; σ=697.11 ns @ 3 trials
     [java]  2% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=1} 242113.90 ns; σ=2406.61 ns @ 4 trials
     [java]  2% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=1} 241653.77 ns; σ=1078.15 ns @ 3 trials
     [java]  2% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=1} 241870.45 ns; σ=931.23 ns @ 3 trials
     [java]  2% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=1} 234353.05 ns; σ=2297.32 ns @ 9 trials
     [java]  2% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=1} 234327.75 ns; σ=2304.48 ns @ 6 trials
     [java]  2% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=1} 234375.06 ns; σ=3010.35 ns @ 10 trials
     [java]  3% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=1} 239011.89 ns; σ=12565.17 ns @ 10 trials
     [java]  3% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=1} 234213.19 ns; σ=2289.95 ns @ 7 trials
     [java]  3% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=1} 235295.27 ns; σ=5970.84 ns @ 10 trials
     [java]  3% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=1} 234648.75 ns; σ=2278.92 ns @ 6 trials
     [java]  3% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=1} 234731.85 ns; σ=2259.11 ns @ 9 trials
     [java]  3% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=1} 234565.63 ns; σ=2381.34 ns @ 10 trials
     [java]  4% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=1} 237041.86 ns; σ=1844.72 ns @ 3 trials
     [java]  4% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=1} 234783.23 ns; σ=2241.75 ns @ 7 trials
     [java]  4% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=1} 234882.37 ns; σ=2644.66 ns @ 10 trials
     [java]  4% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=1} 236010.61 ns; σ=2314.53 ns @ 8 trials
     [java]  4% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=1} 234868.63 ns; σ=6022.01 ns @ 10 trials
     [java]  5% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=1} 234889.60 ns; σ=2285.78 ns @ 5 trials
     [java]  5% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=1} 235728.19 ns; σ=6041.98 ns @ 10 trials
     [java]  5% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=1} 233939.29 ns; σ=2780.42 ns @ 10 trials
     [java]  5% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=1} 234590.20 ns; σ=2287.93 ns @ 7 trials
     [java]  5% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=1} 234413.04 ns; σ=2463.71 ns @ 10 trials
     [java]  5% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=1} 235287.78 ns; σ=2341.74 ns @ 8 trials
     [java]  6% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=1} 235470.84 ns; σ=2567.02 ns @ 10 trials
     [java]  6% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=1} 234496.84 ns; σ=2532.96 ns @ 10 trials
     [java]  6% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=1} 235989.74 ns; σ=2176.97 ns @ 7 trials
     [java]  6% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=1} 234278.53 ns; σ=2271.87 ns @ 10 trials
     [java]  6% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=1} 234522.39 ns; σ=7168.58 ns @ 10 trials
     [java]  6% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=1} 235111.26 ns; σ=3861.24 ns @ 10 trials
     [java]  7% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=1} 235349.54 ns; σ=2179.98 ns @ 7 trials
     [java]  7% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=1} 235128.05 ns; σ=2105.93 ns @ 5 trials
     [java]  7% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=1} 234806.21 ns; σ=2282.73 ns @ 7 trials
     [java]  7% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=1} 235297.93 ns; σ=2867.16 ns @ 10 trials
     [java]  7% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=1} 237010.51 ns; σ=2297.46 ns @ 8 trials
     [java]  7% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=1} 237111.88 ns; σ=2678.27 ns @ 10 trials
     [java]  8% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=1} 238375.10 ns; σ=2258.37 ns @ 4 trials
     [java]  8% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=1} 344437.47 ns; σ=3116.12 ns @ 4 trials
     [java]  8% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=1} 349600.04 ns; σ=3320.14 ns @ 4 trials
     [java]  8% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=1} 347240.59 ns; σ=2744.26 ns @ 3 trials
     [java]  8% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=2} 217880.70 ns; σ=8661.93 ns @ 10 trials
     [java]  9% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=2} 218187.19 ns; σ=8100.73 ns @ 10 trials
     [java]  9% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=2} 217270.62 ns; σ=9166.52 ns @ 10 trials
     [java]  9% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=2} 217978.00 ns; σ=8145.70 ns @ 10 trials
     [java]  9% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=2} 218067.90 ns; σ=8557.49 ns @ 10 trials
     [java]  9% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=2} 218439.84 ns; σ=10057.03 ns @ 10 trials
     [java]  9% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=2} 217474.34 ns; σ=7923.61 ns @ 10 trials
     [java] 10% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=2} 217659.48 ns; σ=8380.46 ns @ 10 trials
     [java] 10% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=2} 217192.54 ns; σ=14162.19 ns @ 10 trials
     [java] 10% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=2} 217686.45 ns; σ=9946.42 ns @ 10 trials
     [java] 10% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=2} 217681.38 ns; σ=8067.55 ns @ 10 trials
     [java] 10% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=2} 217490.96 ns; σ=9815.10 ns @ 10 trials
     [java] 10% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=2} 201715.93 ns; σ=6110.15 ns @ 10 trials
     [java] 11% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=2} 202079.83 ns; σ=6249.70 ns @ 10 trials
     [java] 11% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=2} 201529.56 ns; σ=6898.60 ns @ 10 trials
     [java] 11% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=2} 201901.20 ns; σ=6314.65 ns @ 10 trials
     [java] 11% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=2} 201451.78 ns; σ=6371.34 ns @ 10 trials
     [java] 11% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=2} 202354.04 ns; σ=8002.31 ns @ 10 trials
     [java] 11% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=2} 204039.39 ns; σ=8161.38 ns @ 10 trials
     [java] 12% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=2} 201974.02 ns; σ=6759.24 ns @ 10 trials
     [java] 12% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=2} 201289.07 ns; σ=6682.56 ns @ 10 trials
     [java] 12% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=2} 203459.26 ns; σ=6039.85 ns @ 10 trials
     [java] 12% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=2} 202049.36 ns; σ=6343.79 ns @ 10 trials
     [java] 12% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=2} 201138.63 ns; σ=6467.38 ns @ 10 trials
     [java] 13% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=2} 201762.17 ns; σ=6391.84 ns @ 10 trials
     [java] 13% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=2} 201598.64 ns; σ=6521.60 ns @ 10 trials
     [java] 13% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=2} 201688.77 ns; σ=8929.82 ns @ 10 trials
     [java] 13% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=2} 201879.68 ns; σ=6603.44 ns @ 10 trials
     [java] 13% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=2} 201556.59 ns; σ=6410.42 ns @ 10 trials
     [java] 13% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=2} 201518.58 ns; σ=6368.33 ns @ 10 trials
     [java] 14% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=2} 201494.50 ns; σ=6765.35 ns @ 10 trials
     [java] 14% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=2} 202046.00 ns; σ=6450.03 ns @ 10 trials
     [java] 14% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=2} 201850.51 ns; σ=6782.91 ns @ 10 trials
     [java] 14% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=2} 201378.74 ns; σ=6602.83 ns @ 10 trials
     [java] 14% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=2} 201652.36 ns; σ=6414.23 ns @ 10 trials
     [java] 14% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=2} 201309.28 ns; σ=9526.82 ns @ 10 trials
     [java] 15% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=2} 201130.91 ns; σ=6521.94 ns @ 10 trials
     [java] 15% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=2} 201284.65 ns; σ=6740.80 ns @ 10 trials
     [java] 15% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=2} 201013.54 ns; σ=6419.41 ns @ 10 trials
     [java] 15% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=2} 201435.27 ns; σ=6655.82 ns @ 10 trials
     [java] 15% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=2} 201204.98 ns; σ=10534.55 ns @ 10 trials
     [java] 15% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=2} 202027.79 ns; σ=6634.61 ns @ 10 trials
     [java] 16% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=2} 202663.96 ns; σ=6560.54 ns @ 10 trials
     [java] 16% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=2} 202420.34 ns; σ=6834.84 ns @ 10 trials
     [java] 16% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=2} 202823.20 ns; σ=10077.40 ns @ 10 trials
     [java] 16% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=2} 358223.20 ns; σ=1018.84 ns @ 3 trials
     [java] 16% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=2} 355916.75 ns; σ=3144.18 ns @ 3 trials
     [java] 16% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=2} 355321.10 ns; σ=3246.75 ns @ 4 trials
     [java] 17% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=4} 219001.32 ns; σ=5427.82 ns @ 10 trials
     [java] 17% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=4} 218257.43 ns; σ=5814.10 ns @ 10 trials
     [java] 17% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=4} 219055.53 ns; σ=5433.63 ns @ 10 trials
     [java] 17% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=4} 219471.43 ns; σ=4967.29 ns @ 10 trials
     [java] 17% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=4} 218943.83 ns; σ=5174.71 ns @ 10 trials
     [java] 18% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=4} 218744.69 ns; σ=5358.98 ns @ 10 trials
     [java] 18% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=4} 218536.76 ns; σ=9188.35 ns @ 10 trials
     [java] 18% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=4} 218935.04 ns; σ=5242.01 ns @ 10 trials
     [java] 18% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=4} 220092.07 ns; σ=5018.08 ns @ 10 trials
     [java] 18% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=4} 218674.67 ns; σ=5718.75 ns @ 10 trials
     [java] 18% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=4} 218501.65 ns; σ=5336.13 ns @ 10 trials
     [java] 19% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=4} 218302.33 ns; σ=5360.76 ns @ 10 trials
     [java] 19% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=4} 186456.81 ns; σ=217.64 ns @ 3 trials
     [java] 19% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=4} 184819.87 ns; σ=1208.29 ns @ 3 trials
     [java] 19% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=4} 185686.71 ns; σ=480.08 ns @ 3 trials
     [java] 19% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=4} 185179.91 ns; σ=1024.97 ns @ 3 trials
     [java] 19% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=4} 185327.82 ns; σ=804.31 ns @ 3 trials
     [java] 20% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=4} 184678.60 ns; σ=460.83 ns @ 3 trials
     [java] 20% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=4} 185853.45 ns; σ=711.35 ns @ 3 trials
     [java] 20% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=4} 187065.81 ns; σ=1745.59 ns @ 3 trials
     [java] 20% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=4} 185530.43 ns; σ=358.51 ns @ 3 trials
     [java] 20% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=4} 185005.65 ns; σ=211.53 ns @ 3 trials
     [java] 20% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=4} 187031.45 ns; σ=219.32 ns @ 3 trials
     [java] 21% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=4} 185604.14 ns; σ=228.61 ns @ 3 trials
     [java] 21% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=4} 185191.26 ns; σ=894.72 ns @ 3 trials
     [java] 21% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=4} 185432.41 ns; σ=645.82 ns @ 3 trials
     [java] 21% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=4} 184849.40 ns; σ=441.18 ns @ 3 trials
     [java] 21% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=4} 184924.07 ns; σ=773.59 ns @ 3 trials
     [java] 22% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=4} 185604.17 ns; σ=191.45 ns @ 3 trials
     [java] 22% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=4} 185115.10 ns; σ=1753.04 ns @ 3 trials
     [java] 22% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=4} 185569.82 ns; σ=417.12 ns @ 3 trials
     [java] 22% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=4} 185570.50 ns; σ=817.89 ns @ 3 trials
     [java] 22% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=4} 185398.21 ns; σ=1298.15 ns @ 3 trials
     [java] 22% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=4} 185464.33 ns; σ=750.86 ns @ 3 trials
     [java] 23% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=4} 184224.91 ns; σ=227.04 ns @ 3 trials
     [java] 23% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=4} 185051.19 ns; σ=391.86 ns @ 3 trials
     [java] 23% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=4} 185208.23 ns; σ=1583.30 ns @ 3 trials
     [java] 23% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=4} 185255.76 ns; σ=549.57 ns @ 3 trials
     [java] 23% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=4} 185979.91 ns; σ=1165.94 ns @ 3 trials
     [java] 23% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=4} 184912.05 ns; σ=64.74 ns @ 3 trials
     [java] 24% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=4} 185427.20 ns; σ=445.03 ns @ 3 trials
     [java] 24% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=4} 185142.04 ns; σ=971.38 ns @ 3 trials
     [java] 24% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=4} 186060.13 ns; σ=2363.26 ns @ 10 trials
     [java] 24% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=4} 184979.96 ns; σ=487.10 ns @ 3 trials
     [java] 24% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=4} 185705.01 ns; σ=1137.62 ns @ 3 trials
     [java] 24% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=4} 367761.34 ns; σ=1047.88 ns @ 3 trials
     [java] 25% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=4} 367130.12 ns; σ=3374.65 ns @ 3 trials
     [java] 25% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=4} 371259.07 ns; σ=6017.16 ns @ 10 trials
     [java] 25% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=8} 207294.76 ns; σ=5469.75 ns @ 10 trials
     [java] 25% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=8} 208400.00 ns; σ=6750.29 ns @ 10 trials
     [java] 25% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=8} 207651.12 ns; σ=6139.86 ns @ 10 trials
     [java] 26% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=8} 207860.44 ns; σ=13154.75 ns @ 10 trials
     [java] 26% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=8} 207845.70 ns; σ=5901.52 ns @ 10 trials
     [java] 26% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=8} 207785.32 ns; σ=6488.38 ns @ 10 trials
     [java] 26% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=8} 207489.66 ns; σ=7204.72 ns @ 10 trials
     [java] 26% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=8} 207893.75 ns; σ=5814.32 ns @ 10 trials
     [java] 26% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=8} 208062.35 ns; σ=5322.02 ns @ 10 trials
     [java] 27% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=8} 208879.71 ns; σ=6030.31 ns @ 10 trials
     [java] 27% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=8} 208680.97 ns; σ=5470.30 ns @ 10 trials
     [java] 27% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=8} 208662.44 ns; σ=5543.31 ns @ 10 trials
     [java] 27% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=8} 178247.40 ns; σ=764.98 ns @ 3 trials
     [java] 27% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=8} 178237.80 ns; σ=1315.35 ns @ 3 trials
     [java] 27% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=8} 178357.37 ns; σ=423.59 ns @ 3 trials
     [java] 28% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=8} 177969.68 ns; σ=1706.36 ns @ 3 trials
     [java] 28% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=8} 179523.68 ns; σ=1356.49 ns @ 3 trials
     [java] 28% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=8} 178061.64 ns; σ=1258.59 ns @ 3 trials
     [java] 28% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=8} 178862.51 ns; σ=780.60 ns @ 3 trials
     [java] 28% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=8} 177958.74 ns; σ=368.33 ns @ 3 trials
     [java] 28% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=8} 177836.21 ns; σ=632.56 ns @ 3 trials
     [java] 29% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=8} 177695.11 ns; σ=666.40 ns @ 3 trials
     [java] 29% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=8} 177125.44 ns; σ=253.47 ns @ 3 trials
     [java] 29% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=8} 177494.55 ns; σ=534.91 ns @ 3 trials
     [java] 29% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=8} 173174.30 ns; σ=778.42 ns @ 3 trials
     [java] 29% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=8} 177629.78 ns; σ=228.27 ns @ 3 trials
     [java] 30% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=8} 178058.12 ns; σ=1729.03 ns @ 5 trials
     [java] 30% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=8} 177977.12 ns; σ=443.96 ns @ 3 trials
     [java] 30% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=8} 177728.23 ns; σ=82.79 ns @ 3 trials
     [java] 30% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=8} 178553.45 ns; σ=311.82 ns @ 3 trials
     [java] 30% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=8} 177748.52 ns; σ=1755.29 ns @ 5 trials
     [java] 30% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=8} 178615.92 ns; σ=10032.75 ns @ 10 trials
     [java] 31% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=8} 178183.41 ns; σ=792.00 ns @ 3 trials
     [java] 31% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=8} 177627.43 ns; σ=760.89 ns @ 3 trials
     [java] 31% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=8} 176594.30 ns; σ=910.01 ns @ 3 trials
     [java] 31% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=8} 176989.21 ns; σ=230.90 ns @ 3 trials
     [java] 31% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=8} 177256.22 ns; σ=447.36 ns @ 3 trials
     [java] 31% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=8} 176741.56 ns; σ=249.82 ns @ 3 trials
     [java] 32% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=8} 177848.03 ns; σ=406.65 ns @ 3 trials
     [java] 32% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=8} 178461.24 ns; σ=571.05 ns @ 3 trials
     [java] 32% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=8} 177346.00 ns; σ=140.37 ns @ 3 trials
     [java] 32% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=8} 177595.06 ns; σ=429.31 ns @ 3 trials
     [java] 32% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=8} 177660.25 ns; σ=961.37 ns @ 3 trials
     [java] 32% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=8} 177438.73 ns; σ=529.33 ns @ 3 trials
     [java] 33% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=8} 178316.18 ns; σ=726.31 ns @ 3 trials
     [java] 33% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=8} 380319.23 ns; σ=2320.09 ns @ 3 trials
     [java] 33% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=8} 378482.04 ns; σ=2152.07 ns @ 3 trials
     [java] 33% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=8} 378804.91 ns; σ=1126.51 ns @ 3 trials
     [java] 33% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=16} 383463.36 ns; σ=3092.87 ns @ 3 trials
     [java] 34% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=16} 381785.49 ns; σ=13834.20 ns @ 10 trials
     [java] 34% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=16} 380507.72 ns; σ=210.70 ns @ 3 trials
     [java] 34% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=16} 383566.46 ns; σ=1573.16 ns @ 3 trials
     [java] 34% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=16} 384043.33 ns; σ=698.30 ns @ 3 trials
     [java] 34% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=16} 383583.00 ns; σ=2947.92 ns @ 3 trials
     [java] 34% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=16} 381814.66 ns; σ=1759.94 ns @ 3 trials
     [java] 35% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=16} 381410.43 ns; σ=1346.42 ns @ 3 trials
     [java] 35% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=16} 381898.38 ns; σ=3583.79 ns @ 3 trials
     [java] 35% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=16} 381928.68 ns; σ=9969.23 ns @ 10 trials
     [java] 35% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=16} 382632.65 ns; σ=535.19 ns @ 3 trials
     [java] 35% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=16} 384443.55 ns; σ=1931.82 ns @ 3 trials
     [java] 35% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=16} 379196.85 ns; σ=839.35 ns @ 3 trials
     [java] 36% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=16} 378658.09 ns; σ=1341.14 ns @ 3 trials
     [java] 36% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=16} 379209.85 ns; σ=4517.24 ns @ 10 trials
     [java] 36% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=16} 382134.70 ns; σ=16432.09 ns @ 10 trials
     [java] 36% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=16} 382275.12 ns; σ=2262.34 ns @ 3 trials
     [java] 36% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=16} 378489.24 ns; σ=818.91 ns @ 3 trials
     [java] 36% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=16} 380846.33 ns; σ=3762.66 ns @ 5 trials
     [java] 37% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=16} 378034.38 ns; σ=587.54 ns @ 3 trials
     [java] 37% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=16} 378273.70 ns; σ=940.65 ns @ 3 trials
     [java] 37% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=16} 378299.86 ns; σ=3516.58 ns @ 4 trials
     [java] 37% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=16} 378865.03 ns; σ=3624.26 ns @ 3 trials
     [java] 37% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=16} 379295.41 ns; σ=178.27 ns @ 3 trials
     [java] 38% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=16} 379150.46 ns; σ=2704.50 ns @ 3 trials
     [java] 38% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=16} 378049.92 ns; σ=4613.84 ns @ 10 trials
     [java] 38% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=16} 377655.89 ns; σ=488.78 ns @ 3 trials
     [java] 38% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=16} 378323.00 ns; σ=1171.79 ns @ 3 trials
     [java] 38% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=16} 382953.79 ns; σ=3490.49 ns @ 3 trials
     [java] 38% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=16} 379055.06 ns; σ=1710.75 ns @ 3 trials
     [java] 39% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=16} 381383.38 ns; σ=2467.54 ns @ 3 trials
     [java] 39% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=16} 380117.46 ns; σ=8015.36 ns @ 10 trials
     [java] 39% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=16} 379199.43 ns; σ=198.09 ns @ 3 trials
     [java] 39% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=16} 379010.08 ns; σ=1755.24 ns @ 3 trials
     [java] 39% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=16} 379572.16 ns; σ=192.61 ns @ 3 trials
     [java] 39% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=16} 379218.42 ns; σ=3062.99 ns @ 3 trials
     [java] 40% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=16} 381987.41 ns; σ=1480.33 ns @ 3 trials
     [java] 40% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=16} 378945.76 ns; σ=1147.07 ns @ 3 trials
     [java] 40% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=16} 379243.99 ns; σ=2543.14 ns @ 3 trials
     [java] 40% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=16} 377603.03 ns; σ=1168.00 ns @ 3 trials
     [java] 40% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=16} 377298.19 ns; σ=2107.09 ns @ 3 trials
     [java] 40% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=16} 377252.82 ns; σ=1417.85 ns @ 3 trials
     [java] 41% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=16} 383271.16 ns; σ=3657.32 ns @ 3 trials
     [java] 41% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=16} 381839.58 ns; σ=3126.17 ns @ 3 trials
     [java] 41% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=16} 378811.28 ns; σ=2318.37 ns @ 3 trials
     [java] 41% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=16} 646171.50 ns; σ=2397.40 ns @ 3 trials
     [java] 41% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=16} 652607.74 ns; σ=8747.41 ns @ 10 trials
     [java] 41% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=16} 650393.65 ns; σ=1028.77 ns @ 3 trials
     [java] 42% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=32} 380149.97 ns; σ=428.86 ns @ 3 trials
     [java] 42% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=32} 383764.90 ns; σ=2635.13 ns @ 3 trials
     [java] 42% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=32} 382265.36 ns; σ=1700.79 ns @ 3 trials
     [java] 42% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=32} 381874.52 ns; σ=985.62 ns @ 3 trials
     [java] 42% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=32} 383670.50 ns; σ=2015.43 ns @ 3 trials
     [java] 43% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=32} 385125.79 ns; σ=104.26 ns @ 3 trials
     [java] 43% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=32} 386768.42 ns; σ=3196.04 ns @ 3 trials
     [java] 43% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=32} 383433.62 ns; σ=1798.13 ns @ 3 trials
     [java] 43% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=32} 392541.95 ns; σ=3035.15 ns @ 3 trials
     [java] 43% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=32} 382111.23 ns; σ=1122.83 ns @ 3 trials
     [java] 43% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=32} 386163.89 ns; σ=1442.42 ns @ 3 trials
     [java] 44% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=32} 384102.57 ns; σ=1174.24 ns @ 3 trials
     [java] 44% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=32} 402317.42 ns; σ=12512.45 ns @ 10 trials
     [java] 44% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=32} 382466.73 ns; σ=1099.47 ns @ 3 trials
     [java] 44% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=32} 378740.53 ns; σ=3571.18 ns @ 3 trials
     [java] 44% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=32} 382299.89 ns; σ=1148.97 ns @ 3 trials
     [java] 44% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=32} 404845.97 ns; σ=27669.73 ns @ 10 trials
     [java] 45% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=32} 384679.71 ns; σ=2484.88 ns @ 3 trials
     [java] 45% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=32} 378439.24 ns; σ=2127.60 ns @ 3 trials
     [java] 45% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=32} 378390.71 ns; σ=842.68 ns @ 3 trials
     [java] 45% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=32} 387877.68 ns; σ=12581.44 ns @ 10 trials
     [java] 45% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=32} 377203.56 ns; σ=1727.20 ns @ 3 trials
     [java] 45% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=32} 377469.50 ns; σ=3581.02 ns @ 3 trials
     [java] 46% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=32} 381589.58 ns; σ=2988.62 ns @ 3 trials
     [java] 46% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=32} 379439.40 ns; σ=781.57 ns @ 3 trials
     [java] 46% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=32} 379829.56 ns; σ=3009.95 ns @ 3 trials
     [java] 46% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=32} 381519.08 ns; σ=2010.40 ns @ 3 trials
     [java] 46% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=32} 377357.80 ns; σ=2761.19 ns @ 3 trials
     [java] 47% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=32} 377540.26 ns; σ=2213.60 ns @ 3 trials
     [java] 47% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=32} 378879.38 ns; σ=2163.96 ns @ 3 trials
     [java] 47% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=32} 382367.42 ns; σ=1790.79 ns @ 3 trials
     [java] 47% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=32} 379675.11 ns; σ=2307.32 ns @ 3 trials
     [java] 47% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=32} 379648.43 ns; σ=3775.03 ns @ 3 trials
     [java] 47% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=32} 387888.23 ns; σ=10226.72 ns @ 10 trials
     [java] 48% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=32} 381075.55 ns; σ=1583.65 ns @ 3 trials
     [java] 48% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=32} 378262.62 ns; σ=1114.86 ns @ 3 trials
     [java] 48% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=32} 383511.91 ns; σ=3810.05 ns @ 3 trials
     [java] 48% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=32} 381019.02 ns; σ=816.48 ns @ 3 trials
     [java] 48% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=32} 378908.83 ns; σ=1360.61 ns @ 3 trials
     [java] 48% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=32} 380094.74 ns; σ=1180.28 ns @ 3 trials
     [java] 49% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=32} 381267.46 ns; σ=2905.05 ns @ 3 trials
     [java] 49% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=32} 378763.10 ns; σ=1585.93 ns @ 3 trials
     [java] 49% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=32} 378449.19 ns; σ=511.65 ns @ 3 trials
     [java] 49% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=32} 380357.38 ns; σ=542.83 ns @ 3 trials
     [java] 49% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=32} 379132.65 ns; σ=797.73 ns @ 3 trials
     [java] 49% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=32} 681481.24 ns; σ=2105.74 ns @ 3 trials
     [java] 50% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=32} 679320.96 ns; σ=841.07 ns @ 3 trials
     [java] 50% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=32} 678388.67 ns; σ=6781.30 ns @ 10 trials
     [java] 50% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=64} 422047.83 ns; σ=11460.32 ns @ 10 trials
     [java] 50% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=64} 429257.32 ns; σ=24878.28 ns @ 10 trials
     [java] 50% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=64} 444830.87 ns; σ=10988.66 ns @ 10 trials
     [java] 51% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=64} 477266.97 ns; σ=32058.44 ns @ 10 trials
     [java] 51% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=64} 450556.42 ns; σ=39562.77 ns @ 10 trials
     [java] 51% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=64} 458478.72 ns; σ=26013.74 ns @ 10 trials
     [java] 51% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=64} 435435.84 ns; σ=18278.66 ns @ 10 trials
     [java] 51% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=64} 507297.35 ns; σ=55762.80 ns @ 10 trials
     [java] 51% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=64} 442594.30 ns; σ=25297.16 ns @ 10 trials
     [java] 52% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=64} 481522.71 ns; σ=17697.37 ns @ 10 trials
     [java] 52% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=64} 438454.26 ns; σ=16196.22 ns @ 10 trials
     [java] 52% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=64} 469946.89 ns; σ=24943.00 ns @ 10 trials
     [java] 52% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=64} 441980.01 ns; σ=23418.80 ns @ 10 trials
     [java] 52% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=64} 475100.56 ns; σ=19409.01 ns @ 10 trials
     [java] 52% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=64} 433073.29 ns; σ=11054.28 ns @ 10 trials
     [java] 53% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=64} 413876.01 ns; σ=18347.73 ns @ 10 trials
     [java] 53% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=64} 458992.27 ns; σ=33050.48 ns @ 10 trials
     [java] 53% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=64} 449953.75 ns; σ=7894.81 ns @ 10 trials
     [java] 53% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=64} 426863.62 ns; σ=24625.18 ns @ 10 trials
     [java] 53% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=64} 461176.76 ns; σ=39843.58 ns @ 10 trials
     [java] 53% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=64} 473791.41 ns; σ=17068.93 ns @ 10 trials
     [java] 54% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=64} 428470.72 ns; σ=18323.45 ns @ 10 trials
     [java] 54% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=64} 422335.17 ns; σ=26838.44 ns @ 10 trials
     [java] 54% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=64} 424757.38 ns; σ=17518.43 ns @ 10 trials
     [java] 54% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=64} 449528.34 ns; σ=31782.56 ns @ 10 trials
     [java] 54% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=64} 444079.72 ns; σ=29369.25 ns @ 10 trials
     [java] 55% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=64} 473419.45 ns; σ=65026.75 ns @ 10 trials
     [java] 55% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=64} 423029.35 ns; σ=21104.06 ns @ 10 trials
     [java] 55% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=64} 434503.50 ns; σ=11609.06 ns @ 10 trials
     [java] 55% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=64} 455039.56 ns; σ=38544.01 ns @ 10 trials
     [java] 55% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=64} 472846.50 ns; σ=41451.25 ns @ 10 trials
     [java] 55% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=64} 412114.78 ns; σ=12690.04 ns @ 10 trials
     [java] 56% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=64} 412269.05 ns; σ=24354.23 ns @ 10 trials
     [java] 56% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=64} 431676.51 ns; σ=31882.46 ns @ 10 trials
     [java] 56% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=64} 411315.02 ns; σ=14408.03 ns @ 10 trials
     [java] 56% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=64} 442785.01 ns; σ=30073.05 ns @ 10 trials
     [java] 56% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=64} 417845.96 ns; σ=15391.04 ns @ 10 trials
     [java] 56% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=64} 423981.86 ns; σ=12766.19 ns @ 10 trials
     [java] 57% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=64} 419597.90 ns; σ=18286.23 ns @ 10 trials
     [java] 57% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=64} 422095.93 ns; σ=15002.57 ns @ 10 trials
     [java] 57% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=64} 416952.14 ns; σ=22964.46 ns @ 10 trials
     [java] 57% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=64} 416569.99 ns; σ=13938.58 ns @ 10 trials
     [java] 57% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=64} 404758.68 ns; σ=17306.02 ns @ 10 trials
     [java] 57% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=64} 406686.64 ns; σ=12615.17 ns @ 10 trials
     [java] 58% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=64} 457923.06 ns; σ=30855.71 ns @ 10 trials
     [java] 58% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=64} 754235.23 ns; σ=30092.13 ns @ 10 trials
     [java] 58% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=64} 752374.54 ns; σ=11660.21 ns @ 10 trials
     [java] 58% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=64} 739903.58 ns; σ=19063.98 ns @ 10 trials
     [java] 58% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=128} 602067.57 ns; σ=2522.89 ns @ 3 trials
     [java] 59% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=128} 601758.63 ns; σ=20897.43 ns @ 10 trials
     [java] 59% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=128} 602297.81 ns; σ=2452.69 ns @ 3 trials
     [java] 59% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=128} 598951.62 ns; σ=15203.56 ns @ 10 trials
     [java] 59% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=128} 595500.02 ns; σ=9712.06 ns @ 10 trials
     [java] 59% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=128} 602893.08 ns; σ=688.07 ns @ 3 trials
     [java] 59% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=128} 599961.21 ns; σ=5725.82 ns @ 7 trials
     [java] 60% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=128} 602433.25 ns; σ=2705.58 ns @ 3 trials
     [java] 60% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=128} 603828.64 ns; σ=2631.85 ns @ 3 trials
     [java] 60% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=128} 604524.51 ns; σ=5696.44 ns @ 3 trials
     [java] 60% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=128} 604518.94 ns; σ=5745.95 ns @ 10 trials
     [java] 60% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=128} 604885.10 ns; σ=5491.07 ns @ 5 trials
     [java] 60% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=128} 601116.13 ns; σ=2037.34 ns @ 3 trials
     [java] 61% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=128} 602260.79 ns; σ=2037.78 ns @ 3 trials
     [java] 61% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=128} 603259.71 ns; σ=2916.93 ns @ 3 trials
     [java] 61% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=128} 602007.89 ns; σ=3499.89 ns @ 3 trials
     [java] 61% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=128} 601400.52 ns; σ=4791.84 ns @ 3 trials
     [java] 61% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=128} 601462.23 ns; σ=2036.77 ns @ 3 trials
     [java] 61% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=128} 600076.05 ns; σ=5809.33 ns @ 8 trials
     [java] 62% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=128} 604836.03 ns; σ=1392.75 ns @ 3 trials
     [java] 62% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=128} 603010.63 ns; σ=538.97 ns @ 3 trials
     [java] 62% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=128} 603217.71 ns; σ=2103.35 ns @ 3 trials
     [java] 62% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=128} 600243.74 ns; σ=1871.33 ns @ 3 trials
     [java] 62% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=128} 602101.57 ns; σ=11133.18 ns @ 10 trials
     [java] 63% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=128} 603054.31 ns; σ=1104.66 ns @ 3 trials
     [java] 63% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=128} 602584.08 ns; σ=2116.52 ns @ 3 trials
     [java] 63% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=128} 602749.76 ns; σ=6004.02 ns @ 10 trials
     [java] 63% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=128} 602498.61 ns; σ=402.00 ns @ 3 trials
     [java] 63% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=128} 599547.24 ns; σ=5485.32 ns @ 3 trials
     [java] 63% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=128} 597266.25 ns; σ=5705.21 ns @ 5 trials
     [java] 64% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=128} 585766.17 ns; σ=11099.12 ns @ 10 trials
     [java] 64% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=128} 600740.16 ns; σ=3400.65 ns @ 3 trials
     [java] 64% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=128} 601839.90 ns; σ=1503.68 ns @ 3 trials
     [java] 64% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=128} 599430.33 ns; σ=12326.77 ns @ 10 trials
     [java] 64% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=128} 586985.99 ns; σ=8689.33 ns @ 10 trials
     [java] 64% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=128} 603332.85 ns; σ=19911.91 ns @ 10 trials
     [java] 65% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=128} 590079.40 ns; σ=9600.56 ns @ 10 trials
     [java] 65% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=128} 598367.52 ns; σ=11135.06 ns @ 10 trials
     [java] 65% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=128} 583480.69 ns; σ=10784.08 ns @ 10 trials
     [java] 65% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=128} 598262.06 ns; σ=12477.47 ns @ 10 trials
     [java] 65% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=128} 602854.97 ns; σ=1413.70 ns @ 3 trials
     [java] 65% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=128} 604252.86 ns; σ=1743.33 ns @ 3 trials
     [java] 66% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=128} 602036.78 ns; σ=3603.44 ns @ 3 trials
     [java] 66% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=128} 600360.04 ns; σ=2349.64 ns @ 3 trials
     [java] 66% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=128} 602546.35 ns; σ=5297.52 ns @ 3 trials
     [java] 66% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=128} 844634.81 ns; σ=17559.45 ns @ 10 trials
     [java] 66% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=128} 838822.10 ns; σ=5769.51 ns @ 3 trials
     [java] 66% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=128} 849345.36 ns; σ=3497.00 ns @ 3 trials
     [java] 67% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=256} 606482.91 ns; σ=1040.85 ns @ 3 trials
     [java] 67% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=256} 603882.95 ns; σ=5735.07 ns @ 3 trials
     [java] 67% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=256} 601845.32 ns; σ=5438.74 ns @ 3 trials
     [java] 67% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=256} 597151.25 ns; σ=5145.61 ns @ 3 trials
     [java] 67% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=256} 598028.22 ns; σ=4034.66 ns @ 3 trials
     [java] 68% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=256} 598486.34 ns; σ=233.14 ns @ 3 trials
     [java] 68% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=256} 604303.13 ns; σ=9732.70 ns @ 10 trials
     [java] 68% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=256} 596649.62 ns; σ=964.08 ns @ 3 trials
     [java] 68% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=256} 596142.04 ns; σ=689.53 ns @ 3 trials
     [java] 68% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=256} 600336.70 ns; σ=2290.54 ns @ 3 trials
     [java] 68% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=256} 597984.95 ns; σ=18928.52 ns @ 10 trials
     [java] 69% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=256} 598229.42 ns; σ=1871.52 ns @ 3 trials
     [java] 69% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=256} 596432.63 ns; σ=13506.41 ns @ 10 trials
     [java] 69% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=256} 597610.14 ns; σ=2247.12 ns @ 3 trials
     [java] 69% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=256} 595859.34 ns; σ=493.65 ns @ 3 trials
     [java] 69% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=256} 596180.83 ns; σ=2460.41 ns @ 3 trials
     [java] 69% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=256} 597190.76 ns; σ=885.92 ns @ 3 trials
     [java] 70% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=256} 593663.03 ns; σ=2061.43 ns @ 3 trials
     [java] 70% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=256} 597820.82 ns; σ=2646.34 ns @ 3 trials
     [java] 70% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=256} 596904.52 ns; σ=367.01 ns @ 3 trials
     [java] 70% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=256} 596193.09 ns; σ=3949.21 ns @ 3 trials
     [java] 70% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=256} 594600.55 ns; σ=2778.97 ns @ 3 trials
     [java] 70% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=256} 595848.86 ns; σ=260.75 ns @ 3 trials
     [java] 71% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=256} 600534.04 ns; σ=4369.55 ns @ 3 trials
     [java] 71% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=256} 597333.99 ns; σ=1941.23 ns @ 3 trials
     [java] 71% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=256} 596549.11 ns; σ=2884.38 ns @ 3 trials
     [java] 71% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=256} 596041.58 ns; σ=1963.99 ns @ 3 trials
     [java] 71% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=256} 596363.22 ns; σ=982.95 ns @ 3 trials
     [java] 72% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=256} 595452.23 ns; σ=996.78 ns @ 3 trials
     [java] 72% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=256} 596310.61 ns; σ=429.51 ns @ 3 trials
     [java] 72% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=256} 596425.75 ns; σ=1061.69 ns @ 3 trials
     [java] 72% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=256} 594539.94 ns; σ=4984.95 ns @ 3 trials
     [java] 72% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=256} 593182.05 ns; σ=5662.89 ns @ 3 trials
     [java] 72% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=256} 596453.66 ns; σ=1876.71 ns @ 3 trials
     [java] 73% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=256} 593425.77 ns; σ=529.26 ns @ 3 trials
     [java] 73% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=256} 595324.49 ns; σ=1092.10 ns @ 3 trials
     [java] 73% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=256} 594446.55 ns; σ=2107.75 ns @ 3 trials
     [java] 73% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=256} 593178.06 ns; σ=296.02 ns @ 3 trials
     [java] 73% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=256} 594686.17 ns; σ=2229.25 ns @ 3 trials
     [java] 73% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=256} 594469.27 ns; σ=1243.77 ns @ 3 trials
     [java] 74% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=256} 596793.52 ns; σ=2888.94 ns @ 3 trials
     [java] 74% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=256} 595682.76 ns; σ=2769.69 ns @ 3 trials
     [java] 74% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=256} 593901.69 ns; σ=759.00 ns @ 3 trials
     [java] 74% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=256} 593487.95 ns; σ=5484.15 ns @ 3 trials
     [java] 74% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=256} 594427.10 ns; σ=3632.44 ns @ 3 trials
     [java] 74% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=256} 846765.19 ns; σ=4298.01 ns @ 3 trials
     [java] 75% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=256} 848361.73 ns; σ=8310.28 ns @ 7 trials
     [java] 75% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=256} 848444.97 ns; σ=6467.82 ns @ 3 trials
     [java] 75% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=512} 673245.49 ns; σ=35138.36 ns @ 10 trials
     [java] 75% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=512} 671021.95 ns; σ=6427.03 ns @ 3 trials
     [java] 75% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=512} 690717.15 ns; σ=40148.10 ns @ 10 trials
     [java] 76% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=512} 664353.10 ns; σ=57617.83 ns @ 10 trials
     [java] 76% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=512} 695185.66 ns; σ=34601.05 ns @ 10 trials
     [java] 76% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=512} 675391.14 ns; σ=58857.41 ns @ 10 trials
     [java] 76% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=512} 730978.73 ns; σ=25478.82 ns @ 10 trials
     [java] 76% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=512} 675519.01 ns; σ=21551.87 ns @ 10 trials
     [java] 76% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=512} 675033.83 ns; σ=20203.97 ns @ 10 trials
     [java] 77% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=512} 675786.97 ns; σ=39308.72 ns @ 10 trials
     [java] 77% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=512} 681994.17 ns; σ=43336.71 ns @ 10 trials
     [java] 77% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=512} 652957.08 ns; σ=20534.96 ns @ 10 trials
     [java] 77% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=512} 702786.80 ns; σ=76977.39 ns @ 10 trials
     [java] 77% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=512} 670346.51 ns; σ=23105.70 ns @ 10 trials
     [java] 77% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=512} 745632.66 ns; σ=52671.05 ns @ 10 trials
     [java] 78% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=512} 685046.65 ns; σ=26803.28 ns @ 10 trials
     [java] 78% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=512} 680416.00 ns; σ=41570.21 ns @ 10 trials
     [java] 78% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=512} 688441.45 ns; σ=68716.81 ns @ 10 trials
     [java] 78% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=512} 676980.12 ns; σ=38845.09 ns @ 10 trials
     [java] 78% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=512} 717645.82 ns; σ=36786.05 ns @ 10 trials
     [java] 78% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=512} 675989.92 ns; σ=19220.87 ns @ 10 trials
     [java] 79% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=512} 708253.84 ns; σ=34078.20 ns @ 10 trials
     [java] 79% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=512} 668975.45 ns; σ=33125.97 ns @ 10 trials
     [java] 79% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=512} 714656.28 ns; σ=35801.33 ns @ 10 trials
     [java] 79% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=512} 667616.38 ns; σ=30180.14 ns @ 10 trials
     [java] 79% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=512} 705925.33 ns; σ=33672.06 ns @ 10 trials
     [java] 80% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=512} 701608.85 ns; σ=38922.68 ns @ 10 trials
     [java] 80% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=512} 682021.21 ns; σ=13435.04 ns @ 10 trials
     [java] 80% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=512} 716236.51 ns; σ=29372.14 ns @ 10 trials
     [java] 80% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=512} 743003.18 ns; σ=18051.68 ns @ 10 trials
     [java] 80% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=512} 732323.80 ns; σ=33699.19 ns @ 10 trials
     [java] 80% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=512} 718395.96 ns; σ=36488.90 ns @ 10 trials
     [java] 81% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=512} 748542.82 ns; σ=50581.50 ns @ 10 trials
     [java] 81% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=512} 689422.16 ns; σ=33585.72 ns @ 10 trials
     [java] 81% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=512} 659826.80 ns; σ=37293.14 ns @ 10 trials
     [java] 81% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=512} 636031.39 ns; σ=11668.13 ns @ 10 trials
     [java] 81% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=512} 680711.72 ns; σ=35242.26 ns @ 10 trials
     [java] 81% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=512} 675216.73 ns; σ=57867.60 ns @ 10 trials
     [java] 82% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=512} 727764.42 ns; σ=68204.40 ns @ 10 trials
     [java] 82% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=512} 711828.52 ns; σ=40776.54 ns @ 10 trials
     [java] 82% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=512} 718968.67 ns; σ=45384.65 ns @ 10 trials
     [java] 82% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=512} 676254.49 ns; σ=18825.61 ns @ 10 trials
     [java] 82% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=512} 735176.15 ns; σ=37880.40 ns @ 10 trials
     [java] 82% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=512} 711708.60 ns; σ=46839.26 ns @ 10 trials
     [java] 83% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=512} 732596.35 ns; σ=5329.52 ns @ 3 trials
     [java] 83% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=512} 934445.84 ns; σ=25724.58 ns @ 10 trials
     [java] 83% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=512} 932799.73 ns; σ=42312.69 ns @ 10 trials
     [java] 83% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=512} 913748.24 ns; σ=18083.02 ns @ 10 trials
     [java] 83% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=1024} 1384932.40 ns; σ=11243.57 ns @ 3 trials
     [java] 84% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=1024} 1358377.64 ns; σ=39842.51 ns @ 10 trials
     [java] 84% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=1024} 1376227.09 ns; σ=24516.57 ns @ 10 trials
     [java] 84% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=1024} 1376655.92 ns; σ=23038.85 ns @ 10 trials
     [java] 84% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=1024} 1390325.23 ns; σ=12988.68 ns @ 5 trials
     [java] 84% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=1024} 1364590.36 ns; σ=13590.11 ns @ 8 trials
     [java] 84% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=1024} 1357252.29 ns; σ=13505.70 ns @ 8 trials
     [java] 85% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=1024} 1349005.45 ns; σ=18301.90 ns @ 10 trials
     [java] 85% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=1024} 1369893.67 ns; σ=44793.59 ns @ 10 trials
     [java] 85% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=1024} 1347108.75 ns; σ=4476.76 ns @ 3 trials
     [java] 85% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=1024} 1360099.52 ns; σ=17970.98 ns @ 10 trials
     [java] 85% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=1024} 1368051.45 ns; σ=9110.90 ns @ 3 trials
     [java] 85% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=1024} 1395800.16 ns; σ=20783.24 ns @ 10 trials
     [java] 86% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=1024} 1369235.29 ns; σ=3126.64 ns @ 3 trials
     [java] 86% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=1024} 1381873.29 ns; σ=13723.37 ns @ 4 trials
     [java] 86% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=1024} 1386447.53 ns; σ=2537.23 ns @ 3 trials
     [java] 86% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=1024} 1379306.47 ns; σ=13485.89 ns @ 4 trials
     [java] 86% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=1024} 1362185.01 ns; σ=21097.45 ns @ 10 trials
     [java] 86% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=1024} 1360775.87 ns; σ=6595.96 ns @ 3 trials
     [java] 87% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=1024} 1350114.13 ns; σ=7197.93 ns @ 3 trials
     [java] 87% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=1024} 1390631.92 ns; σ=20709.97 ns @ 10 trials
     [java] 87% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=1024} 1371219.09 ns; σ=10678.71 ns @ 3 trials
     [java] 87% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=1024} 1360051.31 ns; σ=4611.16 ns @ 3 trials
     [java] 87% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=1024} 1376710.51 ns; σ=17360.99 ns @ 10 trials
     [java] 88% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=1024} 1369378.84 ns; σ=26381.68 ns @ 10 trials
     [java] 88% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=1024} 1383944.84 ns; σ=3133.95 ns @ 3 trials
     [java] 88% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=1024} 1399140.81 ns; σ=6864.35 ns @ 3 trials
     [java] 88% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=1024} 1358137.67 ns; σ=8890.78 ns @ 3 trials
     [java] 88% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=1024} 1359485.95 ns; σ=55843.97 ns @ 10 trials
     [java] 88% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=1024} 1367256.00 ns; σ=12078.56 ns @ 3 trials
     [java] 89% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=1024} 1359336.37 ns; σ=10167.69 ns @ 3 trials
     [java] 89% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=1024} 1373834.98 ns; σ=7581.59 ns @ 3 trials
     [java] 89% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=1024} 1360270.67 ns; σ=18813.23 ns @ 10 trials
     [java] 89% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=1024} 1376098.55 ns; σ=3511.21 ns @ 3 trials
     [java] 89% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=1024} 1345435.70 ns; σ=3913.53 ns @ 3 trials
     [java] 89% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=1024} 1366184.47 ns; σ=6167.90 ns @ 3 trials
     [java] 90% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=1024} 1369478.52 ns; σ=6311.70 ns @ 3 trials
     [java] 90% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=1024} 1380883.81 ns; σ=8009.48 ns @ 3 trials
     [java] 90% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=1024} 1372652.28 ns; σ=12661.19 ns @ 7 trials
     [java] 90% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=1024} 1357865.66 ns; σ=8265.04 ns @ 3 trials
     [java] 90% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=1024} 1374726.10 ns; σ=2734.28 ns @ 3 trials
     [java] 90% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=1024} 1348617.36 ns; σ=7079.98 ns @ 3 trials
     [java] 91% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=1024} 1376437.69 ns; σ=2863.92 ns @ 3 trials
     [java] 91% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=1024} 1363795.63 ns; σ=7826.74 ns @ 3 trials
     [java] 91% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=1024} 1350418.08 ns; σ=2863.22 ns @ 3 trials
     [java] 91% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=1024} 1521094.69 ns; σ=14562.66 ns @ 4 trials
     [java] 91% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=1024} 1520302.15 ns; σ=8269.85 ns @ 3 trials
     [java] 91% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=1024} 1517316.08 ns; σ=45815.52 ns @ 10 trials
     [java] 92% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=0, size=2048} 1559328.54 ns; σ=2899.23 ns @ 3 trials
     [java] 92% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=0, size=2048} 1560263.18 ns; σ=10453.89 ns @ 3 trials
     [java] 92% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=0, size=2048} 1560526.58 ns; σ=7052.76 ns @ 3 trials
     [java] 92% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=1, size=2048} 1556476.92 ns; σ=6880.51 ns @ 3 trials
     [java] 92% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=1, size=2048} 1567118.68 ns; σ=8045.75 ns @ 3 trials
     [java] 93% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=1, size=2048} 1566024.03 ns; σ=8567.47 ns @ 3 trials
     [java] 93% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=2, size=2048} 1563486.83 ns; σ=2372.02 ns @ 3 trials
     [java] 93% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=2, size=2048} 1567222.07 ns; σ=8141.26 ns @ 3 trials
     [java] 93% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=2, size=2048} 1563866.57 ns; σ=830.01 ns @ 3 trials
     [java] 93% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=3, size=2048} 1558767.45 ns; σ=5506.21 ns @ 3 trials
     [java] 93% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=3, size=2048} 1558991.26 ns; σ=4846.29 ns @ 3 trials
     [java] 94% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=3, size=2048} 1557942.88 ns; σ=2831.61 ns @ 3 trials
     [java] 94% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=4, size=2048} 1570773.86 ns; σ=7603.17 ns @ 3 trials
     [java] 94% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=4, size=2048} 1561530.68 ns; σ=2391.27 ns @ 3 trials
     [java] 94% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=4, size=2048} 1567392.46 ns; σ=4336.97 ns @ 3 trials
     [java] 94% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=5, size=2048} 1563169.03 ns; σ=7509.38 ns @ 3 trials
     [java] 94% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=5, size=2048} 1565188.64 ns; σ=4801.19 ns @ 3 trials
     [java] 95% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=5, size=2048} 1562955.25 ns; σ=2479.36 ns @ 3 trials
     [java] 95% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=6, size=2048} 1568621.22 ns; σ=13099.94 ns @ 3 trials
     [java] 95% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=6, size=2048} 1566567.09 ns; σ=4138.09 ns @ 3 trials
     [java] 95% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=6, size=2048} 1557625.82 ns; σ=6333.92 ns @ 3 trials
     [java] 95% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=7, size=2048} 1569404.44 ns; σ=4163.22 ns @ 3 trials
     [java] 95% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=7, size=2048} 1563220.57 ns; σ=10185.42 ns @ 3 trials
     [java] 96% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=7, size=2048} 1562920.01 ns; σ=3989.28 ns @ 3 trials
     [java] 96% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=8, size=2048} 1562250.25 ns; σ=34288.08 ns @ 10 trials
     [java] 96% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=8, size=2048} 1559718.20 ns; σ=4247.90 ns @ 3 trials
     [java] 96% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=8, size=2048} 1563907.05 ns; σ=7982.43 ns @ 3 trials
     [java] 96% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=16, size=2048} 1565401.25 ns; σ=4326.58 ns @ 3 trials
     [java] 97% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=16, size=2048} 1559946.17 ns; σ=5399.75 ns @ 3 trials
     [java] 97% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=16, size=2048} 1559947.58 ns; σ=8118.81 ns @ 3 trials
     [java] 97% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=24, size=2048} 1564359.39 ns; σ=1427.25 ns @ 3 trials
     [java] 97% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=24, size=2048} 1569314.42 ns; σ=6192.34 ns @ 3 trials
     [java] 97% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=24, size=2048} 1561766.51 ns; σ=209.30 ns @ 3 trials
     [java] 97% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=32, size=2048} 1560489.07 ns; σ=10024.79 ns @ 3 trials
     [java] 98% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=32, size=2048} 1566391.76 ns; σ=6779.73 ns @ 3 trials
     [java] 98% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=32, size=2048} 1558163.18 ns; σ=8619.78 ns @ 3 trials
     [java] 98% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=40, size=2048} 1561020.28 ns; σ=11460.71 ns @ 3 trials
     [java] 98% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=40, size=2048} 1563332.61 ns; σ=9479.80 ns @ 3 trials
     [java] 98% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=40, size=2048} 1566349.55 ns; σ=2715.69 ns @ 3 trials
     [java] 98% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=48, size=2048} 1566674.10 ns; σ=3990.50 ns @ 3 trials
     [java] 99% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=48, size=2048} 1576367.84 ns; σ=13853.82 ns @ 3 trials
     [java] 99% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=48, size=2048} 1564942.30 ns; σ=42489.85 ns @ 10 trials
     [java] 99% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=56, size=2048} 1559626.91 ns; σ=5911.17 ns @ 3 trials
     [java] 99% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=56, size=2048} 1568232.21 ns; σ=3207.79 ns @ 3 trials
     [java] 99% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=56, size=2048} 1567149.13 ns; σ=3862.05 ns @ 3 trials
     [java] 99% Scenario{vm=java, trial=0, benchmark=OffsetLongAccess, offset=60, size=2048} 1719062.57 ns; σ=6821.79 ns @ 3 trials
     [java] 100% Scenario{vm=java, trial=1, benchmark=OffsetLongAccess, offset=60, size=2048} 1724239.16 ns; σ=3095.46 ns @ 3 trials
     [java] 100% Scenario{vm=java, trial=2, benchmark=OffsetLongAccess, offset=60, size=2048} 1722522.38 ns; σ=14237.40 ns @ 3 trials
     [java] 
     [java] size offset trial   us linear runtime
     [java]    1      0     0  241 ====
     [java]    1      0     1  241 ====
     [java]    1      0     2  241 ====
     [java]    1      1     0  240 ====
     [java]    1      1     1  242 ====
     [java]    1      1     2  242 ====
     [java]    1      2     0  241 ====
     [java]    1      2     1  241 ====
     [java]    1      2     2  242 ====
     [java]    1      3     0  242 ====
     [java]    1      3     1  242 ====
     [java]    1      3     2  242 ====
     [java]    1      4     0  234 ====
     [java]    1      4     1  234 ====
     [java]    1      4     2  234 ====
     [java]    1      5     0  239 ====
     [java]    1      5     1  234 ====
     [java]    1      5     2  235 ====
     [java]    1      6     0  235 ====
     [java]    1      6     1  235 ====
     [java]    1      6     2  235 ====
     [java]    1      7     0  237 ====
     [java]    1      7     1  235 ====
     [java]    1      7     2  235 ====
     [java]    1      8     0  236 ====
     [java]    1      8     1  235 ====
     [java]    1      8     2  235 ====
     [java]    1     16     0  236 ====
     [java]    1     16     1  234 ====
     [java]    1     16     2  235 ====
     [java]    1     24     0  234 ====
     [java]    1     24     1  235 ====
     [java]    1     24     2  235 ====
     [java]    1     32     0  234 ====
     [java]    1     32     1  236 ====
     [java]    1     32     2  234 ====
     [java]    1     40     0  235 ====
     [java]    1     40     1  235 ====
     [java]    1     40     2  235 ====
     [java]    1     48     0  235 ====
     [java]    1     48     1  235 ====
     [java]    1     48     2  235 ====
     [java]    1     56     0  237 ====
     [java]    1     56     1  237 ====
     [java]    1     56     2  238 ====
     [java]    1     60     0  344 =====
     [java]    1     60     1  350 ======
     [java]    1     60     2  347 ======
     [java]    2      0     0  218 ===
     [java]    2      0     1  218 ===
     [java]    2      0     2  217 ===
     [java]    2      1     0  218 ===
     [java]    2      1     1  218 ===
     [java]    2      1     2  218 ===
     [java]    2      2     0  217 ===
     [java]    2      2     1  218 ===
     [java]    2      2     2  217 ===
     [java]    2      3     0  218 ===
     [java]    2      3     1  218 ===
     [java]    2      3     2  217 ===
     [java]    2      4     0  202 ===
     [java]    2      4     1  202 ===
     [java]    2      4     2  202 ===
     [java]    2      5     0  202 ===
     [java]    2      5     1  201 ===
     [java]    2      5     2  202 ===
     [java]    2      6     0  204 ===
     [java]    2      6     1  202 ===
     [java]    2      6     2  201 ===
     [java]    2      7     0  203 ===
     [java]    2      7     1  202 ===
     [java]    2      7     2  201 ===
     [java]    2      8     0  202 ===
     [java]    2      8     1  202 ===
     [java]    2      8     2  202 ===
     [java]    2     16     0  202 ===
     [java]    2     16     1  202 ===
     [java]    2     16     2  202 ===
     [java]    2     24     0  201 ===
     [java]    2     24     1  202 ===
     [java]    2     24     2  202 ===
     [java]    2     32     0  201 ===
     [java]    2     32     1  202 ===
     [java]    2     32     2  201 ===
     [java]    2     40     0  201 ===
     [java]    2     40     1  201 ===
     [java]    2     40     2  201 ===
     [java]    2     48     0  201 ===
     [java]    2     48     1  201 ===
     [java]    2     48     2  202 ===
     [java]    2     56     0  203 ===
     [java]    2     56     1  202 ===
     [java]    2     56     2  203 ===
     [java]    2     60     0  358 ======
     [java]    2     60     1  356 ======
     [java]    2     60     2  355 ======
     [java]    4      0     0  219 ===
     [java]    4      0     1  218 ===
     [java]    4      0     2  219 ===
     [java]    4      1     0  219 ===
     [java]    4      1     1  219 ===
     [java]    4      1     2  219 ===
     [java]    4      2     0  219 ===
     [java]    4      2     1  219 ===
     [java]    4      2     2  220 ===
     [java]    4      3     0  219 ===
     [java]    4      3     1  219 ===
     [java]    4      3     2  218 ===
     [java]    4      4     0  186 ===
     [java]    4      4     1  185 ===
     [java]    4      4     2  186 ===
     [java]    4      5     0  185 ===
     [java]    4      5     1  185 ===
     [java]    4      5     2  185 ===
     [java]    4      6     0  186 ===
     [java]    4      6     1  187 ===
     [java]    4      6     2  186 ===
     [java]    4      7     0  185 ===
     [java]    4      7     1  187 ===
     [java]    4      7     2  186 ===
     [java]    4      8     0  185 ===
     [java]    4      8     1  185 ===
     [java]    4      8     2  185 ===
     [java]    4     16     0  185 ===
     [java]    4     16     1  186 ===
     [java]    4     16     2  185 ===
     [java]    4     24     0  186 ===
     [java]    4     24     1  186 ===
     [java]    4     24     2  185 ===
     [java]    4     32     0  185 ===
     [java]    4     32     1  184 ===
     [java]    4     32     2  185 ===
     [java]    4     40     0  185 ===
     [java]    4     40     1  185 ===
     [java]    4     40     2  186 ===
     [java]    4     48     0  185 ===
     [java]    4     48     1  185 ===
     [java]    4     48     2  185 ===
     [java]    4     56     0  186 ===
     [java]    4     56     1  185 ===
     [java]    4     56     2  186 ===
     [java]    4     60     0  368 ======
     [java]    4     60     1  367 ======
     [java]    4     60     2  371 ======
     [java]    8      0     0  207 ===
     [java]    8      0     1  208 ===
     [java]    8      0     2  208 ===
     [java]    8      1     0  208 ===
     [java]    8      1     1  208 ===
     [java]    8      1     2  208 ===
     [java]    8      2     0  207 ===
     [java]    8      2     1  208 ===
     [java]    8      2     2  208 ===
     [java]    8      3     0  209 ===
     [java]    8      3     1  209 ===
     [java]    8      3     2  209 ===
     [java]    8      4     0  178 ===
     [java]    8      4     1  178 ===
     [java]    8      4     2  178 ===
     [java]    8      5     0  178 ===
     [java]    8      5     1  180 ===
     [java]    8      5     2  178 ===
     [java]    8      6     0  179 ===
     [java]    8      6     1  178 ===
     [java]    8      6     2  178 ===
     [java]    8      7     0  178 ===
     [java]    8      7     1  177 ===
     [java]    8      7     2  177 ===
     [java]    8      8     0  173 ===
     [java]    8      8     1  178 ===
     [java]    8      8     2  178 ===
     [java]    8     16     0  178 ===
     [java]    8     16     1  178 ===
     [java]    8     16     2  179 ===
     [java]    8     24     0  178 ===
     [java]    8     24     1  179 ===
     [java]    8     24     2  178 ===
     [java]    8     32     0  178 ===
     [java]    8     32     1  177 ===
     [java]    8     32     2  177 ===
     [java]    8     40     0  177 ===
     [java]    8     40     1  177 ===
     [java]    8     40     2  178 ===
     [java]    8     48     0  178 ===
     [java]    8     48     1  177 ===
     [java]    8     48     2  178 ===
     [java]    8     56     0  178 ===
     [java]    8     56     1  177 ===
     [java]    8     56     2  178 ===
     [java]    8     60     0  380 ======
     [java]    8     60     1  378 ======
     [java]    8     60     2  379 ======
     [java]   16      0     0  383 ======
     [java]   16      0     1  382 ======
     [java]   16      0     2  381 ======
     [java]   16      1     0  384 ======
     [java]   16      1     1  384 ======
     [java]   16      1     2  384 ======
     [java]   16      2     0  382 ======
     [java]   16      2     1  381 ======
     [java]   16      2     2  382 ======
     [java]   16      3     0  382 ======
     [java]   16      3     1  383 ======
     [java]   16      3     2  384 ======
     [java]   16      4     0  379 ======
     [java]   16      4     1  379 ======
     [java]   16      4     2  379 ======
     [java]   16      5     0  382 ======
     [java]   16      5     1  382 ======
     [java]   16      5     2  378 ======
     [java]   16      6     0  381 ======
     [java]   16      6     1  378 ======
     [java]   16      6     2  378 ======
     [java]   16      7     0  378 ======
     [java]   16      7     1  379 ======
     [java]   16      7     2  379 ======
     [java]   16      8     0  379 ======
     [java]   16      8     1  378 ======
     [java]   16      8     2  378 ======
     [java]   16     16     0  378 ======
     [java]   16     16     1  383 ======
     [java]   16     16     2  379 ======
     [java]   16     24     0  381 ======
     [java]   16     24     1  380 ======
     [java]   16     24     2  379 ======
     [java]   16     32     0  379 ======
     [java]   16     32     1  380 ======
     [java]   16     32     2  379 ======
     [java]   16     40     0  382 ======
     [java]   16     40     1  379 ======
     [java]   16     40     2  379 ======
     [java]   16     48     0  378 ======
     [java]   16     48     1  377 ======
     [java]   16     48     2  377 ======
     [java]   16     56     0  383 ======
     [java]   16     56     1  382 ======
     [java]   16     56     2  379 ======
     [java]   16     60     0  646 ===========
     [java]   16     60     1  653 ===========
     [java]   16     60     2  650 ===========
     [java]   32      0     0  380 ======
     [java]   32      0     1  384 ======
     [java]   32      0     2  382 ======
     [java]   32      1     0  382 ======
     [java]   32      1     1  384 ======
     [java]   32      1     2  385 ======
     [java]   32      2     0  387 ======
     [java]   32      2     1  383 ======
     [java]   32      2     2  393 ======
     [java]   32      3     0  382 ======
     [java]   32      3     1  386 ======
     [java]   32      3     2  384 ======
     [java]   32      4     0  402 ======
     [java]   32      4     1  382 ======
     [java]   32      4     2  379 ======
     [java]   32      5     0  382 ======
     [java]   32      5     1  405 =======
     [java]   32      5     2  385 ======
     [java]   32      6     0  378 ======
     [java]   32      6     1  378 ======
     [java]   32      6     2  388 ======
     [java]   32      7     0  377 ======
     [java]   32      7     1  377 ======
     [java]   32      7     2  382 ======
     [java]   32      8     0  379 ======
     [java]   32      8     1  380 ======
     [java]   32      8     2  382 ======
     [java]   32     16     0  377 ======
     [java]   32     16     1  378 ======
     [java]   32     16     2  379 ======
     [java]   32     24     0  382 ======
     [java]   32     24     1  380 ======
     [java]   32     24     2  380 ======
     [java]   32     32     0  388 ======
     [java]   32     32     1  381 ======
     [java]   32     32     2  378 ======
     [java]   32     40     0  384 ======
     [java]   32     40     1  381 ======
     [java]   32     40     2  379 ======
     [java]   32     48     0  380 ======
     [java]   32     48     1  381 ======
     [java]   32     48     2  379 ======
     [java]   32     56     0  378 ======
     [java]   32     56     1  380 ======
     [java]   32     56     2  379 ======
     [java]   32     60     0  681 ===========
     [java]   32     60     1  679 ===========
     [java]   32     60     2  678 ===========
     [java]   64      0     0  422 =======
     [java]   64      0     1  429 =======
     [java]   64      0     2  445 =======
     [java]   64      1     0  477 ========
     [java]   64      1     1  451 =======
     [java]   64      1     2  458 =======
     [java]   64      2     0  435 =======
     [java]   64      2     1  507 ========
     [java]   64      2     2  443 =======
     [java]   64      3     0  482 ========
     [java]   64      3     1  438 =======
     [java]   64      3     2  470 ========
     [java]   64      4     0  442 =======
     [java]   64      4     1  475 ========
     [java]   64      4     2  433 =======
     [java]   64      5     0  414 =======
     [java]   64      5     1  459 =======
     [java]   64      5     2  450 =======
     [java]   64      6     0  427 =======
     [java]   64      6     1  461 ========
     [java]   64      6     2  474 ========
     [java]   64      7     0  428 =======
     [java]   64      7     1  422 =======
     [java]   64      7     2  425 =======
     [java]   64      8     0  450 =======
     [java]   64      8     1  444 =======
     [java]   64      8     2  473 ========
     [java]   64     16     0  423 =======
     [java]   64     16     1  435 =======
     [java]   64     16     2  455 =======
     [java]   64     24     0  473 ========
     [java]   64     24     1  412 =======
     [java]   64     24     2  412 =======
     [java]   64     32     0  432 =======
     [java]   64     32     1  411 =======
     [java]   64     32     2  443 =======
     [java]   64     40     0  418 =======
     [java]   64     40     1  424 =======
     [java]   64     40     2  420 =======
     [java]   64     48     0  422 =======
     [java]   64     48     1  417 =======
     [java]   64     48     2  417 =======
     [java]   64     56     0  405 =======
     [java]   64     56     1  407 =======
     [java]   64     56     2  458 =======
     [java]   64     60     0  754 =============
     [java]   64     60     1  752 =============
     [java]   64     60     2  740 ============
     [java]  128      0     0  602 ==========
     [java]  128      0     1  602 ==========
     [java]  128      0     2  602 ==========
     [java]  128      1     0  599 ==========
     [java]  128      1     1  596 ==========
     [java]  128      1     2  603 ==========
     [java]  128      2     0  600 ==========
     [java]  128      2     1  602 ==========
     [java]  128      2     2  604 ==========
     [java]  128      3     0  605 ==========
     [java]  128      3     1  605 ==========
     [java]  128      3     2  605 ==========
     [java]  128      4     0  601 ==========
     [java]  128      4     1  602 ==========
     [java]  128      4     2  603 ==========
     [java]  128      5     0  602 ==========
     [java]  128      5     1  601 ==========
     [java]  128      5     2  601 ==========
     [java]  128      6     0  600 ==========
     [java]  128      6     1  605 ==========
     [java]  128      6     2  603 ==========
     [java]  128      7     0  603 ==========
     [java]  128      7     1  600 ==========
     [java]  128      7     2  602 ==========
     [java]  128      8     0  603 ==========
     [java]  128      8     1  603 ==========
     [java]  128      8     2  603 ==========
     [java]  128     16     0  602 ==========
     [java]  128     16     1  600 ==========
     [java]  128     16     2  597 ==========
     [java]  128     24     0  586 ==========
     [java]  128     24     1  601 ==========
     [java]  128     24     2  602 ==========
     [java]  128     32     0  599 ==========
     [java]  128     32     1  587 ==========
     [java]  128     32     2  603 ==========
     [java]  128     40     0  590 ==========
     [java]  128     40     1  598 ==========
     [java]  128     40     2  583 ==========
     [java]  128     48     0  598 ==========
     [java]  128     48     1  603 ==========
     [java]  128     48     2  604 ==========
     [java]  128     56     0  602 ==========
     [java]  128     56     1  600 ==========
     [java]  128     56     2  603 ==========
     [java]  128     60     0  845 ==============
     [java]  128     60     1  839 ==============
     [java]  128     60     2  849 ==============
     [java]  256      0     0  606 ==========
     [java]  256      0     1  604 ==========
     [java]  256      0     2  602 ==========
     [java]  256      1     0  597 ==========
     [java]  256      1     1  598 ==========
     [java]  256      1     2  598 ==========
     [java]  256      2     0  604 ==========
     [java]  256      2     1  597 ==========
     [java]  256      2     2  596 ==========
     [java]  256      3     0  600 ==========
     [java]  256      3     1  598 ==========
     [java]  256      3     2  598 ==========
     [java]  256      4     0  596 ==========
     [java]  256      4     1  598 ==========
     [java]  256      4     2  596 ==========
     [java]  256      5     0  596 ==========
     [java]  256      5     1  597 ==========
     [java]  256      5     2  594 ==========
     [java]  256      6     0  598 ==========
     [java]  256      6     1  597 ==========
     [java]  256      6     2  596 ==========
     [java]  256      7     0  595 ==========
     [java]  256      7     1  596 ==========
     [java]  256      7     2  601 ==========
     [java]  256      8     0  597 ==========
     [java]  256      8     1  597 ==========
     [java]  256      8     2  596 ==========
     [java]  256     16     0  596 ==========
     [java]  256     16     1  595 ==========
     [java]  256     16     2  596 ==========
     [java]  256     24     0  596 ==========
     [java]  256     24     1  595 ==========
     [java]  256     24     2  593 ==========
     [java]  256     32     0  596 ==========
     [java]  256     32     1  593 ==========
     [java]  256     32     2  595 ==========
     [java]  256     40     0  594 ==========
     [java]  256     40     1  593 ==========
     [java]  256     40     2  595 ==========
     [java]  256     48     0  594 ==========
     [java]  256     48     1  597 ==========
     [java]  256     48     2  596 ==========
     [java]  256     56     0  594 ==========
     [java]  256     56     1  593 ==========
     [java]  256     56     2  594 ==========
     [java]  256     60     0  847 ==============
     [java]  256     60     1  848 ==============
     [java]  256     60     2  848 ==============
     [java]  512      0     0  673 ===========
     [java]  512      0     1  671 ===========
     [java]  512      0     2  691 ============
     [java]  512      1     0  664 ===========
     [java]  512      1     1  695 ============
     [java]  512      1     2  675 ===========
     [java]  512      2     0  731 ============
     [java]  512      2     1  676 ===========
     [java]  512      2     2  675 ===========
     [java]  512      3     0  676 ===========
     [java]  512      3     1  682 ===========
     [java]  512      3     2  653 ===========
     [java]  512      4     0  703 ============
     [java]  512      4     1  670 ===========
     [java]  512      4     2  746 ============
     [java]  512      5     0  685 ===========
     [java]  512      5     1  680 ===========
     [java]  512      5     2  688 ===========
     [java]  512      6     0  677 ===========
     [java]  512      6     1  718 ============
     [java]  512      6     2  676 ===========
     [java]  512      7     0  708 ============
     [java]  512      7     1  669 ===========
     [java]  512      7     2  715 ============
     [java]  512      8     0  668 ===========
     [java]  512      8     1  706 ============
     [java]  512      8     2  702 ============
     [java]  512     16     0  682 ===========
     [java]  512     16     1  716 ============
     [java]  512     16     2  743 ============
     [java]  512     24     0  732 ============
     [java]  512     24     1  718 ============
     [java]  512     24     2  749 =============
     [java]  512     32     0  689 ===========
     [java]  512     32     1  660 ===========
     [java]  512     32     2  636 ===========
     [java]  512     40     0  681 ===========
     [java]  512     40     1  675 ===========
     [java]  512     40     2  728 ============
     [java]  512     48     0  712 ============
     [java]  512     48     1  719 ============
     [java]  512     48     2  676 ===========
     [java]  512     56     0  735 ============
     [java]  512     56     1  712 ============
     [java]  512     56     2  733 ============
     [java]  512     60     0  934 ================
     [java]  512     60     1  933 ================
     [java]  512     60     2  914 ===============
     [java] 1024      0     0 1385 ========================
     [java] 1024      0     1 1358 =======================
     [java] 1024      0     2 1376 =======================
     [java] 1024      1     0 1377 =======================
     [java] 1024      1     1 1390 ========================
     [java] 1024      1     2 1365 =======================
     [java] 1024      2     0 1357 =======================
     [java] 1024      2     1 1349 =======================
     [java] 1024      2     2 1370 =======================
     [java] 1024      3     0 1347 =======================
     [java] 1024      3     1 1360 =======================
     [java] 1024      3     2 1368 =======================
     [java] 1024      4     0 1396 ========================
     [java] 1024      4     1 1369 =======================
     [java] 1024      4     2 1382 ========================
     [java] 1024      5     0 1386 ========================
     [java] 1024      5     1 1379 =======================
     [java] 1024      5     2 1362 =======================
     [java] 1024      6     0 1361 =======================
     [java] 1024      6     1 1350 =======================
     [java] 1024      6     2 1391 ========================
     [java] 1024      7     0 1371 =======================
     [java] 1024      7     1 1360 =======================
     [java] 1024      7     2 1377 =======================
     [java] 1024      8     0 1369 =======================
     [java] 1024      8     1 1384 ========================
     [java] 1024      8     2 1399 ========================
     [java] 1024     16     0 1358 =======================
     [java] 1024     16     1 1359 =======================
     [java] 1024     16     2 1367 =======================
     [java] 1024     24     0 1359 =======================
     [java] 1024     24     1 1374 =======================
     [java] 1024     24     2 1360 =======================
     [java] 1024     32     0 1376 =======================
     [java] 1024     32     1 1345 =======================
     [java] 1024     32     2 1366 =======================
     [java] 1024     40     0 1369 =======================
     [java] 1024     40     1 1381 ========================
     [java] 1024     40     2 1373 =======================
     [java] 1024     48     0 1358 =======================
     [java] 1024     48     1 1375 =======================
     [java] 1024     48     2 1349 =======================
     [java] 1024     56     0 1376 =======================
     [java] 1024     56     1 1364 =======================
     [java] 1024     56     2 1350 =======================
     [java] 1024     60     0 1521 ==========================
     [java] 1024     60     1 1520 ==========================
     [java] 1024     60     2 1517 ==========================
     [java] 2048      0     0 1559 ===========================
     [java] 2048      0     1 1560 ===========================
     [java] 2048      0     2 1561 ===========================
     [java] 2048      1     0 1556 ===========================
     [java] 2048      1     1 1567 ===========================
     [java] 2048      1     2 1566 ===========================
     [java] 2048      2     0 1563 ===========================
     [java] 2048      2     1 1567 ===========================
     [java] 2048      2     2 1564 ===========================
     [java] 2048      3     0 1559 ===========================
     [java] 2048      3     1 1559 ===========================
     [java] 2048      3     2 1558 ===========================
     [java] 2048      4     0 1571 ===========================
     [java] 2048      4     1 1562 ===========================
     [java] 2048      4     2 1567 ===========================
     [java] 2048      5     0 1563 ===========================
     [java] 2048      5     1 1565 ===========================
     [java] 2048      5     2 1563 ===========================
     [java] 2048      6     0 1569 ===========================
     [java] 2048      6     1 1567 ===========================
     [java] 2048      6     2 1558 ===========================
     [java] 2048      7     0 1569 ===========================
     [java] 2048      7     1 1563 ===========================
     [java] 2048      7     2 1563 ===========================
     [java] 2048      8     0 1562 ===========================
     [java] 2048      8     1 1560 ===========================
     [java] 2048      8     2 1564 ===========================
     [java] 2048     16     0 1565 ===========================
     [java] 2048     16     1 1560 ===========================
     [java] 2048     16     2 1560 ===========================
     [java] 2048     24     0 1564 ===========================
     [java] 2048     24     1 1569 ===========================
     [java] 2048     24     2 1562 ===========================
     [java] 2048     32     0 1560 ===========================
     [java] 2048     32     1 1566 ===========================
     [java] 2048     32     2 1558 ===========================
     [java] 2048     40     0 1561 ===========================
     [java] 2048     40     1 1563 ===========================
     [java] 2048     40     2 1566 ===========================
     [java] 2048     48     0 1567 ===========================
     [java] 2048     48     1 1576 ===========================
     [java] 2048     48     2 1565 ===========================
     [java] 2048     56     0 1560 ===========================
     [java] 2048     56     1 1568 ===========================
     [java] 2048     56     2 1567 ===========================
     [java] 2048     60     0 1719 =============================
     [java] 2048     60     1 1724 ==============================
     [java] 2048     60     2 1723 =============================
     [java] 
     [java] vm: java
     [java] benchmark: OffsetLongAccess

BUILD SUCCESSFUL
Total time: 103 minutes 28 seconds
